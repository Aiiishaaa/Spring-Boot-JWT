package com.application.Exercice.jwt;
import java.io.Serializable;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;



// TokenManager is used to generate and validate the token
// the token is generated by the JwtUserDetailsService

@Component
public class TokenManager implements Serializable {
    private static final long serialVersionUID = 7008375124389347049L;
 

    public int TOKEN_VALIDITY = 60 * 60 * 10;
    private String jwtSecretString = "jdfhfsjkdhfsjkdngbsjkbnjksdbvjksbdbsdjkbsjkdbf";
    byte[] jwtSecretBytes = jwtSecretString.getBytes();
    SecretKey jwtSecret = new SecretKeySpec(jwtSecretBytes, 0, jwtSecretBytes.length, "HmacSHA256");

    public String generateJwtToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return Jwts.builder().setClaims(claims).setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + TOKEN_VALIDITY * 1000))
                .signWith(jwtSecret).compact();
    }

    public Boolean validateJwtToken(String token, UserDetails userDetails) {
        String username = getUsernameFromToken(token);
        Claims claims = Jwts.parserBuilder().setSigningKey(jwtSecret).build().parseClaimsJws(token).getBody();
        Boolean isTokenExpired = claims.getExpiration().before(new Date(0));
        return (username.equals(userDetails.getUsername()) && !isTokenExpired);
    }

    public String getUsernameFromToken(String token) {
        final Claims claims = Jwts.parserBuilder().setSigningKey(jwtSecret).build().parseClaimsJws(token).getBody();
        return claims.getSubject();
    }
}
